
-- ==================================================================
-- ALKAEN T√ÑST√Ñ W3SCHOOLS-HARJ2.SQL
-- MUUTAMIA HARJOITUKSIA W3SCHOOLS JA LIS√Ñ√Ñ EDITOITUNA

-- SQL HAVING Clause
-- üîπ HAVING lis√§ttiin SQL:√§√§n, koska WHERE ei voi suodattaa aggregaattifunktioita kuten SUM(), AVG(), COUNT(), MAX() ja MIN(). üîπ Se toimii yhdess√§ GROUP BY -lauseen kanssa, jotta voidaan suodattaa ryhm√§n tuloksia aggregaattifunktioiden perusteella.


-- T√§m√§ n√§ytt√§√§ vain ne asiakkaat, joilla on enemm√§n kuin yksi tilaus. Esim. yksi tai useammalla henkil√∂ll√§ on pari-muutama tilausta laskettuna
SELECT asiakas_id, COUNT(*) AS tilauksien_maara
FROM Tilaukset
GROUP BY asiakas_id
HAVING tilauksien_maara > 1;


-- lis√§sin JOIN yhdist√§m√§ll√§ Tilauksen ja Asiakkaan taulukon, ett√§ esim. varmistettaan molempien taulukkojen asiakkaiden ja tilauksen id t√§smentyv√§t - ihan kuin reallisessa maailmassa ett√§ menee oikeaan tilaan. HAVING-lauseketta voidaan k√§ytt√§√§, mik√§li jos haluttaisiin ryhmiteltyj√§ tulosta aggregaattifunktiolla. Ja t√§ss√§ suodataan tilausta, joka on yli 2 tilausta.
/*
‚úÖ Mit√§ t√§m√§ tekee?

JOIN yhdist√§√§ asiakkaat ja tilaukset asiakas-ID:n perusteella.

COUNT(Tilaukset.id) laskee, montako tilausta kullakin asiakkaalla on.

GROUP BY ryhmittelee tulokset asiakas ID:n ja nimen mukaan.

HAVING tilauksien_maara > 2 suodattaa vain ne asiakkaat, joilla on yli 2 tilausta.


üìå Milloin HAVING kannattaa k√§ytt√§√§?
‚úî Kun suodatetaan ryhmiteltyj√§ tuloksia, esimerkiksi yli 3 tilausta tehneet asiakkaat. ‚ùå WHERE ei toimi t√§ss√§, koska aggregaattifunktioita ei voi k√§ytt√§√§ siin√§ suoraan.

*/
SELECT Asiakkaat.id, Asiakkaat.nimi, COUNT(Tilaukset.id) AS tilauksien_maara, Tilaukset.toimitus_status 
FROM Asiakkaat JOIN Tilaukset ON Asiakkaat.id = Tilaukset.asiakas_id 
GROUP BY Asiakkaat.id, Asiakkaat.nimi 
HAVING tilauksien_maara > 2; 



-- Laske, kuinka monta kappaletta kutakin tuotetta on tilattu (GROUP BY) ja halutaan n√§hd√§ t√§st√§ kuinka monta kpl:tta kutakin uotetta on tilattu. 
-- Ideana on ryhmittell√§ tuotenimen mukaan ja laskea kuinka monta kappaleta kutakin tuotetta on ostettu.
SELECT Tuotteet.nimi, SUM(Tilauksen_rivit.m√§√§r√§) AS kokonaistilaukset 
FROM Tilauksen_rivit JOIN Tuotteet ON Tilauksen_rivit.tuote_id = Tuotteet.id 
GROUP BY Tuotteet.nimi; 


-- Suodata tuotteet, joiden tilaukset ylitt√§v√§t tietyn m√§√§r√§n (HAVING)
-- t√§st√§ suodataan vain tuotteet, joita on tilattu yli esim. 5 kplta ja vain niit√§ tuotetta
SELECT Tuotteet.nimi, SUM(Tilauksen_rivit.m√§√§r√§) AS kokonaistilaukset 
FROM Tilauksen_rivit JOIN Tuotteet ON Tilauksen_rivit.tuote_id = Tuotteet.id 
GROUP BY Tuotteet.nimi HAVING kokonaistilaukset > 5; 



-- Laske asiakkaan kokonaisostokset (JOIN Tilaukset + GROUP BY)
-- eli haluttaan n√§hd√§ asiakkaiden tilattua kokonais ostosta ja sit√§ summaa, kukin asiakas on k√§ytt√§nyt rahaa/saldoa
SELECT Tilaukset.asiakas_id, SUM(Tilauksen_rivit.yhteishinta) AS asiakkaan_kulut 
FROM Tilauksen_rivit JOIN Tilaukset ON Tilauksen_rivit.tilaus_id = Tilaukset.id 
GROUP BY Tilaukset.asiakas_id; 


-- GROUP BY voidaan yhdist√§√§ WHERE, JOIN, INNER JOIN, ja HAVING COUNT erikseen.

-- esim. laskettaisiin varastontilannetta, ett√§ mukaan ja suodattaa vain tuotteet jotka maksavat esim. yli 50e, ja k√§ytett√§√§n WHERE ennen GROUP BY
SELECT varastotilanne, COUNT(*) AS tuote_maara
FROM Tuotteet
WHERE hinta > 50
GROUP BY varastotilanne;


-- sama kuin ylempi, mutta ryhmitettyn√§ mukaan ja tulostettuna nimet, suodatettaan jolla on alle 5k saldoa
SELECT Asiakkaat.nimi, Asiakkaat.saldo, COUNT(*) AS saldoM√§√§r√§ 
FROM Asiakkaat WHERE Asiakkaat.saldo < 5000 
GROUP BY Asiakkaat.nimi; 


-- GROUP BY + INNER JOIN
-- jos halutaisiin laskea, kuinka monta tuotetta on tilattu per kategoria ja yhdistet√§√§n Tuotteet ja Tilauksen_rivit INNER JOIN:illa molempia taulukkoita.
SELECT Tuotteet.kategoria_id, COUNT(Tilauksen_rivit.tuote_id) AS tilattu_maara
FROM Tuotteet
INNER JOIN Tilauksen_rivit ON Tuotteet.id = Tilauksen_rivit.tuote_id
GROUP BY Tuotteet.kategoria_id;


-- GROUP BY + HAVING COUNT
-- haluttaan n√§ytt√§√§ vain tuotteet, joita on tilattu enemm√§n kuin 2 kertaa, niin k√§ytett√§√§n HAVING COUNT ja ideana on suodattaa pois tuotteet, joita on tilattu ja n√§ytt√§√§ vain ne joita on tilattu enemm√§n
SELECT tuote_id, COUNT(*) AS tilattu_maara 
FROM Tilauksen_rivit 
GROUP BY tuote_id HAVING tilattu_maara > 2; 


-- GROUP BY + JOIN + HAVING COUNT
-- haluttaan n√§ytt√§√§ asiakkaiden nimet, jotka ovat tehneet yli 5 tilausta (sen mukaan mit√§ m√§√§ritt√§√§) ja yhdist√§m√§ll√§ Tilausket ja Asiakkaan taulukkoa, ja suodataan HAVING COUNT-lauseella.

SELECT Asiakkaat.nimi, COUNT(Tilaukset.id) AS tilausten_maara
FROM Asiakkaat
JOIN Tilaukset ON Asiakkaat.id = Tilaukset.asiakas_id
GROUP BY Asiakkaat.nimi
HAVING tilausten_maara > 5;


-- =========================================================================================
-- SQL EXISTS Operator

/* 
‚úÖ EXISTS-operaattori tarkistaa, onko alikyselyss√§ yht√§√§n rivi√§. 
‚úÖ Se palauttaa TRUE, jos alikysely l√∂yt√§√§ v√§hint√§√§n yhden rivin. 
‚úÖ Jos alikysely ei palauta mit√§√§n, EXISTS palauttaa FALSE.
EXISTS on hy√∂dyllinen, kun haluat varmistaa, ett√§ tietty ehto t√§yttyy ilman turhaa tiedon hakemista

SELECT nimi 
FROM Asiakkaat 
WHERE EXISTS (SELECT 1 FROM Tilaukset WHERE Asiakkaat.id = Tilaukset.asiakas_id);

*/

-- esim. t√§m√§ n√§ytt√§√§ VAIN asiakkaat, jotka ovat tehneet v√§hint√§√§n yhden 1 tilauksensa
SELECT nimi 
FROM Asiakkaat 
WHERE EXISTS (SELECT 1 FROM Tilaukset WHERE Asiakkaat.id = Tilaukset.asiakas_id);


-- kokeillaan pikkasen muuta ett√§ tarkistellaan Tuotteen nimen ja varastotilannetta, ett√§ tilauksensa joka varastotilanne on yli 50kpl:ta
-- samaan voihan jos tiet√§√§ on tasa luku vaikappa = 80 - esim. tuotteen tilanteesta niin se l√∂yt√§√§ t√§sm√§llisen m√§√§r√§n
SELECT Tuotteet.nimi, Tuotteet.varastotilanne 
FROM Tuotteet 
WHERE EXISTS (SELECT 1 FROM Tilaukset WHERE Tilaukset.id AND Tuotteet.varastotilanne > 50); 



-- muita esimerkkej√§, ja kokeillaan onko Asiakkaiden taulukosta, joilla on tilausta ja t√§m√§ komento hakee vain ne asiakkaat joilla on esim. v√§hint√§√§n yksi tilaus (SELECT 1 FROM Tilaukset)
SELECT * FROM Asiakkaat
WHERE EXISTS (
    SELECT 1 FROM Tilaukset 
    WHERE Tilaukset.asiakas_id = Asiakkaat.id
);


-- nyt etsit√§√§n Asiakkasta, joilla EI OLE tilauksia eli k√§√§nteinen logiikka
SELECT * FROM Asiakkaat
WHERE NOT EXISTS (
    SELECT 1 FROM Tilaukset 
    WHERE Tilaukset.asiakas_id = Asiakkaat.id
);


-- etsit√§√§n asiakkasta, jotka ovat ostaneet tietyn tuotteen Jos haluat l√∂yt√§√§ asiakkaat, jotka ovat tilanneet tietyn tuotteen. T√§ss√§ on k√§ytetty 3 taulukkoa yhdistettyn√§.
SELECT * FROM Asiakkaat 
WHERE EXISTS ( SELECT 1 FROM Tilauksen_rivit JOIN Tilaukset ON Tilauksen_rivit.tilaus_id = Tilaukset.id 
WHERE Tilauksen_rivit.tuote_id = 5 AND Tilaukset.asiakas_id = Asiakkaat.id ); 


-- etsit√§√§n ja suodatettaan asiakkaan, joiden tilaukset on k√§sitelty Jos haluat listata vain ne asiakkaat, joiden tilauksia on k√§sitelty (toimitus_status = 'k√§sittelyss√§'),
SELECT Asiakkaat.nimi, Asiakkaat.id 
FROM Asiakkaat 
WHERE EXISTS ( SELECT 1 FROM Tilaukset 
WHERE Tilaukset.asiakas_id = Asiakkaat.id AND Tilaukset.toimitus_status = 'k√§sittelyss√§' ); 




-- kokeillaan jotekin saada lis√§√§tty√§ saldoa +100, mutta ennen tarkistellaan se tuloksensa, mit√§ t√§ss√§ komennossa tulostuukaan.
SELECT id, nimi, saldo 
FROM Asiakkaat WHERE EXISTS ( SELECT 1 FROM Tilaukset 
WHERE Tilaukset.asiakas_id = Asiakkaat.id AND Tilaukset.toimitus_status = 'k√§sittelyss√§' ); 

/*
BEFORE:
Full texts
	id 	nimi 	saldo 	
	Edit Edit 	Copy Copy 	Delete Delete 	1 	Matti Meik√§l√§inen 	6860.87
	Edit Edit 	Copy Copy 	Delete Delete 	3 	Jari Korhonen 	28267.12
	Edit Edit 	Copy Copy 	Delete Delete 	7 	Tomi Salminen 	8819.74
	Edit Edit 	Copy Copy 	Delete Delete 	10 	Veera Lehtinen 	50003.36
	Edit Edit 	Copy Copy 	Delete Delete 	17 	Isabella Evans 	42731.48
	Edit Edit 	Copy Copy 	Delete Delete 	21 	Olivia M√§kinen 	3902.34
	Edit Edit 	Copy Copy 	Delete Delete 	22 	Leon Shawn 	44232.84
	Edit Edit 	Copy Copy 	Delete Delete 	106 	Yuki Nakamura 	27660.88
	Edit Edit 	Copy Copy 	Delete Delete 	108 	Jessica Carter 	42487.92
	Edit Edit 	Copy Copy 	Delete Delete 	109 	Brandon Mitchell 	19972.65
	Edit Edit 	Copy Copy 	Delete Delete 	111 	Oliver Bennett 	28835.67


*/

-- sitten suoritettaan t√§llainen komento UPDATE ja mukaan lukien on toi EXISTS komento
UPDATE Asiakkaat
SET saldo = saldo + 100
WHERE EXISTS (
    SELECT 1 FROM Tilaukset 
    WHERE Tilaukset.asiakas_id = Asiakkaat.id
    AND Tilaukset.toimitus_status = 'k√§sittelyss√§'
)


-- sitten toistettaan se sama komento, jossa tarkistellaan henkil√∂n id, nimi ja heid√§n saldonsa ja muutos kyll√§ tapahtui eli after:
SELECT id, nimi, saldo 
FROM Asiakkaat WHERE EXISTS ( SELECT 1 FROM Tilaukset 
WHERE Tilaukset.asiakas_id = Asiakkaat.id AND Tilaukset.toimitus_status = 'k√§sittelyss√§' ); 

/*
AFTER
Full texts
	id 	nimi 	saldo 	
	Edit Edit 	Copy Copy 	Delete Delete 	1 	Matti Meik√§l√§inen 	6960.87
	Edit Edit 	Copy Copy 	Delete Delete 	3 	Jari Korhonen 	28367.12
	Edit Edit 	Copy Copy 	Delete Delete 	7 	Tomi Salminen 	8919.74
	Edit Edit 	Copy Copy 	Delete Delete 	10 	Veera Lehtinen 	50103.36
	Edit Edit 	Copy Copy 	Delete Delete 	17 	Isabella Evans 	42831.48
	Edit Edit 	Copy Copy 	Delete Delete 	21 	Olivia M√§kinen 	4002.34
	Edit Edit 	Copy Copy 	Delete Delete 	22 	Leon Shawn 	44332.84
	Edit Edit 	Copy Copy 	Delete Delete 	106 	Yuki Nakamura 	27760.88
	Edit Edit 	Copy Copy 	Delete Delete 	108 	Jessica Carter 	42587.92
	Edit Edit 	Copy Copy 	Delete Delete 	109 	Brandon Mitchell 	20072.65
	Edit Edit 	Copy Copy 	Delete Delete 	111 	Oliver Bennett 	28935.67

*/



--===========================================================================================
-- SQL ANY and ALL Operators

/*

SQL ANY ja ALL -operaattorit
‚úÖ ANY ja ALL-operaattorit mahdollistavat vertailun yhden sarakkeen arvon ja joukon muiden arvojen v√§lill√§. ‚úÖ N√§it√§ k√§ytet√§√§n yleens√§ subqueryjen kanssa ja toimivat vertailuoperaattoreiden kuten <, >, = ja != kanssa.


üîπ SQL ANY -operaattori
‚úî Palauttaa TRUE, jos yksi tai useampi alikyselyn arvo t√§ytt√§√§ ehdon. ‚úî Ehto toteutuu, jos vertailuoperaatio pit√§√§ paikkansa mink√§ tahansa alikyselyn arvon kohdalla.

*/

-- esim n√§ytt√§√§ tuotteen, joka on halvempi kuin mik√§ tahansa tilattu tuote. ANY t√§ss√§ tarkoittaa, ett√§ tuote n√§ytet√§√§n, jos se on halvempi kuin yksikin tilauksen yhteishinta.
SELECT nimi FROM Tuotteet 
WHERE hinta < ANY (SELECT yhteishinta FROM Tilauksen_rivit);


-- üîπ SQL ALL -operaattori
-- ‚úî Palauttaa TRUE, jos ehto t√§yttyy kaikille alikyselyn palauttamille arvoille. ‚úî Ehto toteutuu vain, jos vertailuoperaatio on tosi jokaisen alikyselyn arvon kohdalla.

-- t√§m√§ n√§ytt√§√§ tuotteensa, jotka ovat kalliimpia kuin kaikki tilatut ja ALL t√§ss√§ tarkoittaa, ett√§ tuote n√§ytet√§√§n vain jos se on kalliimpi kuin jokainen tilauksen yhteishinta.
SELECT Tuotteet.nimi, Tuotteet.hinta 
FROM Tuotteet 
WHERE hinta > ALL (SELECT yhteishinta FROM Tilauksen_rivit); 


/* ANY vs. ALL - eronsa

WHERE hinta < ANY (...)	‚úÖ TRUE, jos hinta on v√§hemm√§n kuin jokin alikyselyn arvoista
WHERE hinta > ALL (...)	‚úÖ TRUE, vain jos hinta on suurempi kuin kaikki alikyselyn arvot

N√§it√§ k√§ytet√§√§n erityisesti vertailuja varten, kun halutaan tarkastella dataa dynaamisesti

üîπ ANY tarkoittaa mik√§ tahansa arvo alikyselyst√§ voi t√§ytt√§√§ ehdon. Jos yksikin arvo t√§ytt√§√§ vertailuehdon, koko ehto on TRUE. 
üîπ ALL tarkoittaa kaikkien alikyselyn arvojen t√§ytyy t√§ytt√§√§ ehto. Ehto pit√§√§ paikkansa vain jos se p√§tee kaikille

Eli ANY antaa joustavuutta, kun taas ALL pakottaa t√§ytt√§m√§√§n ehdon kaikille arvoille
*/


-- t√§m√§ n√§ytt√§√§ tuotteet, joita ei ole tilattu yht√§√§n ja ‚úÖ ALL t√§ss√§ varmistaa, ett√§ vain tuotteet, joita ei ole tilattu yht√§√§n, n√§kyv√§t.
SELECT nimi FROM Tuotteet
WHERE id != ALL (SELECT tuote_id FROM Tilauksen_rivit);



-- ANY ja ALL voivat olla eritt√§in tehokkaita yhdistettyn√§ WHERE- ja HAVING-lausekkeisiin.

-- ANY + WHERE + HAVING: N√§yt√§ asiakkaat, joiden saldo on pienempi kuin mink√§ tahansa tilausten yhteishinta
-- t√§m√§ WHERE saldo < ANY (...) antaa asiakkaan saldo on pienempi kuin ainakin yksi tilauksen yhteishinta. 
-- HAVING saldo > 0: N√§ytet√§√§n vain asiakkaat, joilla on saldoa j√§ljell√§.
SELECT Asiakkaat.nimi, Asiakkaat.saldo
FROM Asiakkaat
WHERE saldo < ANY (SELECT yhteishinta FROM Tilauksen_rivit)
HAVING saldo > 0;

/* OUTOA?
T√§m√§ (ylempi) komento antoi tuloksensa jolla yhdell√§ henkil√∂ll√§ on noin 269.30 (saldoa), eik√§ l√§hell√§ nollaa? 


1Ô∏è‚É£ WHERE saldo < ANY (...):

T√§m√§ tarkoittaa, ett√§ asiakkaan saldo on pienempi kuin ainakin yksi Tilauksen_rivit-taulun yhteishinta.
Koska ANY sallii vertailun mihin tahansa arvoon, se ei vaadi, ett√§ saldo on pienempi kuin kaikki yhteishinnat.

2Ô∏è‚É£ HAVING saldo > 0:

T√§m√§ suodattaa pois kaikki asiakkaat, joiden saldo on 0 tai negatiivinen.
Vain positiivisen saldon omaavat j√§√§v√§t j√§ljelle.

ainakin t√§m√§ kertoi ja antoi kaikki ainutlaatuisen yhteishinnan, jotta n√§kee mik√§ saattaa olla ll√§hell√§ asiakkaan saldoa.. 
*/

-- nyt t√§m√§ sis√§lt√§√§ my√∂s asiakkaansa, joiden saldo on yli 200 ‚Ç¨, mutta silti pienempi kuin joku yhteishinta.
SELECT Asiakkaat.nimi, Asiakkaat.saldo
FROM Asiakkaat
WHERE saldo < ANY (SELECT yhteishinta FROM Tilauksen_rivit)
HAVING saldo > 200;

--===========================================================================================

-- SQL INSERT INTO SELECT Statement
/*
‚úÖ INSERT INTO SELECT kopioi dataa yhdest√§ taulusta toiseen. 
‚úÖ T√§m√§ vaatii, ett√§ l√§hde- ja kohdetaulujen tietotyypit vastaavat toisiaan. 
‚úÖ K√§ytet√§√§n usein varmuuskopiointiin, tietojen siirt√§miseen tai raporttien luomiseen.

*/

-- ArkistoidutTilaukset-taulukko t√§ytyy luoda ensin, jotta INSERT INTO SELECT toimii. Jos taulukkoa ei ole olemassa, kysely aiheuttaa virheen. T√§m√§ toimii kuin backup prosessi, mutta kopsaa nykyisen Tilauksen-taulukon dataa ja se liitt√§√§ sinne jos on luonut uuden X- taulukkon
INSERT INTO ArkistoidutTilaukset (id, asiakas_id, tilaus_pvm, toimitus_status, maksutapa_id)
SELECT id, asiakas_id, tilaus_pvm, toimitus_status, maksutapa_id FROM Tilaukset;

